layout overview
	scale 1 1000
  #colour map-fg altitude
	map-header 0 0 off
	code tex-map
   \framethickness=0.0mm
    	\def\maplayout{
  	\legendbox{120}{-5}{SW}{\scalebar}
    \legendbox{200}{100}{NE}{\northarrow}
    #\legendbox{4}{40}{NE}{\size[15]Max altitude: \the\cavemaxz m asl}
    #\legendbox{4}{38}{NE}{\size[15]Min altitude: \the\caveminz m asl}
    #\legendbox{150}{60}{NW}{\size[10] \the\cavename}
  	}
	code metapost

  def s_scalebar (expr l, units, txt) =
    begingroup
    interim warningcheck:=0;
    tmp05:=5 * (l / Scale * cm * units / 100);
    tmp10:=10 * (l / Scale * cm * units / 100);
    tmp20:=20 * (l / Scale * cm * units / 100);
    tmp40:=40 * (l / Scale * cm * units / 100);
    tmp60:=60 * (l / Scale * cm * units / 100);
    tmp80:=80 * (l / Scale * cm * units / 100);
    tmp100:=100 * (l / Scale * cm * units / 100);
    pptmp05:=20 + 5 * (l / Scale * cm * units / 100);
    pptmp10:=20 +10 * (l / Scale * cm * units / 100);
    pptmp20:=20 +20 * (l / Scale * cm * units / 100);
    pptmp40:=20 +40 * (l / Scale * cm * units / 100);
    pptmp60:=20 +60 * (l / Scale * cm * units / 100);
    pptmp80:=20 +80 * (l / Scale * cm * units / 100);
    pptmp100:=20 +100 * (l / Scale * cm * units / 100);
    scal05:=5 * l / 100;
    scal10:=10 * l / 100;
    scal20:=20 * l / 100;
    scal40:=40 * l / 100;
    scal60:=60 * l / 100;
    scal80:=120 * l / 100;
    brht:= 5bp;
    lblht:= 8bp;
    endgroup;

    pickup PenD;

    #draw (0,0)--(0,brht)--(tmp100,brht)--(tmp100,0)--(0,0);
    #draw (tmp05,0)--(tmp05,brht);
    #draw (tmp10,0)--(tmp10,brht);
    #draw (tmp20,0)--(tmp20,brht);
    #draw (tmp40,0)--(tmp40,brht);
    #draw (tmp60,0)--(tmp60,brht);
    #draw (tmp80,0)--(tmp80,brht);

    draw (-brht,20)--(0,20)--(0,pptmp100)--(-brht,pptmp100)--(-brht,20);
    draw (0,pptmp05)--(-brht,pptmp05);
    draw (0,pptmp10)--(-brht,pptmp10);
    draw (0,pptmp20)--(-brht,pptmp20);
    draw (0,pptmp40)--(-brht,pptmp40);
    draw (0,pptmp60)--(-brht,pptmp60);
    draw (0,pptmp80)--(-brht,pptmp80);

    #fill (tmp05,0)--(tmp10,0)--(tmp10,brht)--(tmp05,brht)--cycle;
    #fill (tmp20,0)--(tmp40,0)--(tmp40,brht)--(tmp20,brht)--cycle;
    #fill (tmp60,0)--(tmp80,0)--(tmp80,brht)--(tmp60,brht)--cycle;

    fill (0,pptmp05)--(0,pptmp10)--(-brht,pptmp10)--(-brht,pptmp05)--cycle;
    fill (0,pptmp20)--(0,pptmp40)--(-brht,pptmp40)--(-brht,pptmp20)--cycle;
    fill (0,pptmp60)--(0,pptmp80)--(-brht,pptmp80)--(-brht,pptmp60)--cycle;

    begingroup
    #label.top(thTEX(decimal (l) & "\thinspace" & txt),origin+(tmp100,lblht));
    #label.top(thTEX(decimal (scal80)),origin+(tmp80,lblht));
    #label.top(thTEX(decimal (scal60)),origin+(tmp60,lblht));
    #label.top(thTEX(decimal (scal40)),origin+(tmp40,lblht));
    #label.top(thTEX(decimal (scal20)),origin+(tmp20,lblht));
    #label.top(thTEX(decimal (scal10)),origin+(tmp10,lblht));
    #label.top(thTEX(decimal (scal05)),origin+(tmp05,lblht));
    #label.top(thTEX(decimal (0)),origin+(0,lblht));

    label.top(thTEX(decimal (l) & "\thinspace" & txt),origin+(2*lblht,pptmp100));
    label.top(thTEX(decimal (scal80)),origin+(2*lblht,pptmp80));
    label.top(thTEX(decimal (scal60)),origin+(2*lblht,pptmp60));
    label.top(thTEX(decimal (scal40)),origin+(2*lblht,pptmp40));
    label.top(thTEX(decimal (scal20)),origin+(2*lblht,pptmp20));
    label.top(thTEX(decimal (scal10)),origin+(2*lblht,pptmp10));
    label.top(thTEX(decimal (scal05)),origin+(2*lblht,pptmp05));
    label.top(thTEX(decimal (0)),origin+(2*lblht,20));
    label.bot(thTEX("Original scale = 1 : " & decimal round(Scale*100)),origin+(pptmp20,20+pptmp40));
    endgroup
  enddef;  

  
	def l_contour_MY(expr P)(text txt) =
      T:=identity;
      pickup PenD;
      thdraw P withcolor (0.5,0.5,0.5);
      for pnt=txt:
        if pnt=-2:
          mark_(P,arctime(arclength(P)/2) of P, 0.2u);
        elseif pnt>=0:
          mark_(P,pnt,0.2*u);
        fi;
        exitif pnt<0;
      endfor;
    enddef;
    
    def l_u_openshaft_MY (expr P) =
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      mojkrok:=adjust_step(dlzka, 0.3u);
      pickup PenC;
      t1:=0;
      
      forever:
        t := arctime (cas + mojkrok/2) of P;
        t2 := arctime (cas + mojkrok) of P;
        thfill (point t1 of P + .1u *unitvector(thdir(P,t1) rotated 90)) -- ((point t of P) + .4u * unitvector(thdir(P,t) rotated 90)) -- (point t2 of P + .1u *unitvector (thdir(P,t2) rotated 90)) -- cycle;
        thdraw (point t1 of P + .1u *unitvector(thdir(P,t1) rotated 90)) .. (point t2 of P + .1u *unitvector (thdir(P,t2) rotated 90));
        cas := cas + mojkrok;
        exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
        t1:=t2;
      endfor;
      thdraw P;
    enddef;
    initsymbol("l_u_openshaft_MY");
    
    def l_u_texture_MY (expr P)=
      T:=identity;
      thdraw P withpen PenD;
    enddef;

    def l_u_icewall_MY (expr P)=
      T:=identity;
      thdraw P withpen PenD withcolor(0,0.7,0.9);
    enddef;


    def l_u_flowstone_MY (expr P) = 
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      mojkrok:=adjust_step(dlzka, .75u);
      pickup PenC;
      p := (-.25u,-.05u)--(-.175u,.05u)--(-.1u,-.05u);
      q := (-.025u,-.05u)--(.05u,.05u)--(0.125u,-.05u);
      forever:
        t := arctime (cas + mojkrok/2) of P;
        thdraw p shifted (point t of P + .25u * unitvector(thdir(P,t) rotated -90)) withcolor(1,0.5,0.1);
        thdraw q shifted (point t of P + .25u * unitvector(thdir(P,t) rotated -90)) withcolor(1,0.5,0.1);
        cas := cas + mojkrok;
        exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
      pickup PenA;  
      thdraw P withcolor(1,0.5,0.1);
    enddef;

    def a_icetwo_MY (expr p) =
      T:=identity;
      thclean p;
      thfill p withcolor (0.72, 0.88, 0.95);
      pickup PenC;
      path q; q = bbox p;
      picture tmp_pic, tmp_ice;
      pair z;
      tmp_ice := image (
        draw (-.13u,0)--(.13u,0);
        draw (0,-.13u)--(0,.13u);
      );
      tmp_pic := image(
        for i = xpart llcorner q step 1.5u until xpart urcorner q:
          for j = ypart llcorner q step 1.5u until ypart urcorner q:
            z := ((i,j) randomized 1.3u);
            if xpart (p intersectiontimes ((bbox tmp_ice) shifted z)) < 0:
              draw tmp_ice shifted z;
            fi;
          endfor;
        endfor;
        );
      clip tmp_pic to p;
      drawoptions();
      draw tmp_pic;
    enddef;

    def l_survey_cave_MY (expr P) =
      T:=identity;
      draw P withpen PenD withcolor (0.7,0,0);
    enddef;

    def l_rockborder_MY (expr P) = 
      T:=identity;
      pickup PenC;
      if cycle P: thclean P fi;
      thdraw P withcolor (0.3,0.3,0.3);
    enddef;

    def l_wall_blocks_MY (expr P)=
      T:=identity;
      cas := 0;
      dlzka := arclength P;
    if dlzka > 0:
      mojkrok:=adjust_step(dlzka, 0.5u);
      pickup PenC;
      forever:
        t1 := arctime (cas + mojkrok*1/10) of P;
        t2 := arctime (cas + mojkrok*9/10) of P;
        
        q := ((point t1 of P) + .2u * unitvector(thdir(P,t1) rotated -125)) -- 
             (subpath (t1,t2) of P) --
             ((point t2 of P) + .2u * unitvector(thdir(P,t2) rotated -75));
        
        thdraw q randomized (u/12) withcolor(0.3,0.3,0.3);
        cas := cas + mojkrok;
        exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
    fi;
    enddef;

    def p_u_logger_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      thdraw (-.3u,-.3u)--(-.3u,.3u)--(.3u,.3u)..(.3u,-.3u)--cycle;
      thfill (-.2u,-.2u)--(-.2u,.2u)--(.2u,.2u)..(.2u,-.2u)--cycle;
    enddef;
      
    def a_water_MY (expr p) =
      T:=identity;
      thfill p withcolor (0.1,0.1,0.25);
    enddef;
    
    def l_pit_MY (expr P) = 
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      mojkrok:=adjust_step(dlzka, 0.15u);
      pickup PenD;  
      forever:
        t := arctime cas of P;
        mark_ (P,t,0.15u);
        cas := cas + mojkrok;
        exitif cas > dlzka + (mojkrok / 3); % for rounding errors
      endfor;
      pickup PenC;  
      thdraw P;
    enddef;

    def p_pillar_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thdraw (-.2u,-.2u)..(-.2u,.2u)..(.2u,.2u)..(.2u,-.2u)..cycle withcolor(1,0.5,0.1);
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_stalagmite_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_stalactite_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thdraw (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_station_temporary_MY (expr pos)=
        T:=identity shifted pos;
        pickup PenC;
        thclean fullcircle scaled 0.25u;
        thdraw  fullcircle scaled 0.25u withcolor (0.7,0,0);
    enddef;

    beginpattern(pattern_ice_MY);
        pickup PenC;
        p:=(-.15u,0)--(.15u,0);
        draw p shifted(0.15,0.25u);
        draw p rotated -90 shifted (.3u,0.2u);
        patternxstep(0.6u);
        patternystep(0.6u);
        patterncolor(0,0.7,0.9);
    endpattern;

    beginpattern(pattern_snow_MY);
        pickup PenC;
        p:=(-.15u,0)--(.15u,0);
        draw p;
        draw p rotated -60;
        draw p rotated 60;
        patternxstep(0.8u);
        patternystep(0.8u);
        patterncolor(0,0.7,0.9);
    endpattern;


    def a_ice_MY (expr Path) =
      T:=identity;
      thclean Path;
      thfill Path withpattern pattern_ice_MY;
    enddef;

    def a_snow_MY (expr P) =
      T:=identity;
      pickup PenC;
      path q; q = bbox P;
      picture tmp_pic, tmp_sn; 
      pair z;
      tmp_sn := image(
        pickup PenC;
        p := origin--(0,.2*u);
        draw p; draw p rotated (60); draw p rotated (120);
        draw p rotated (180); draw p rotated (240); draw p rotated (300);
        
      );
      tmp_pic := image(
        for i = xpart llcorner q step 1u until xpart urcorner q:
          for j = ypart llcorner q step 1u until ypart urcorner q:
            z:=((i,j) randomized 1.u);
      if xpart (P intersectiontimes ((bbox tmp_sn) shifted z)) < 0:
              draw tmp_sn shifted z;
      fi;
          endfor;  
        endfor;
      );
      clip tmp_pic to P;
      drawoptions();
      draw tmp_pic;
    enddef;

    def l_wall_ice_MY (expr P) = 
      T:=identity;
      
      thdraw P withcolor(0,0.7,0.9);
    enddef;

    def p_anchor_MY (expr P,R,S,A)=
      U:=(.1u,.1u);
      T:=identity aligned A rotated R scaled S shifted P;
      q:= origin--(0,0.15u);
      pickup PenA;
      thdraw q rotated (45) shifted (-.1u,.1u);
      thdraw q rotated (135) shifted (-.1u,-.1u);
      thdraw q rotated (225) shifted (.1u,-.1u);
      thdraw q rotated (315) shifted (.1u,.1u);
      thdraw (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle;
    enddef;



    initsymbol("p_station_temporary_MY");
    initsymbol("l_wall_blocks_MY");
    initsymbol("l_rockborder_MY"); 
    initsymbol("a_snow_MY");
    initsymbol("a_ice_MY");
    initsymbol("l_survey_cave_MY");
    initsymbol("l_pit_MY");
    initsymbol("a_water_MY");
    initsymbol("p_u_logger_MY");
    initsymbol("l_u_flowstone_MY");
    initsymbol("l_u_texture_MY");
    initsymbol("l_u_contour_MY");
    initsymbol("p_pillar_MY");
    initsymbol("p_stalagmite_MY");
    initsymbol("p_stalactite_MY");
    initsymbol("l_wall_ice_MY");
    initsymbol("l_u_icewall_MY");
    initsymbol("p_anchor_MY");


  endcode


  symbol-hide point label
 symbol-assign line slope BCRA
 symbol-assign area ice MY
 symbol-assign area snow MY
 symbol-assign line rock-border MY
 symbol-assign line pit AUT
 symbol-assign line wall MY
 symbol-assign line contour MY
 symbol-assign point station AUT
 symbol-assign line survey MY
 symbol-hide point passage-height
 #symbol-hide point label
 symbol-assign point station MY
 symbol-colour area ice [0 70 90]
 symbol-colour point station-name [70 0 0]
 symbol-assign point breakdown-choke AUT
 symbol-colour point flowstone [85 45 10]
 symbol-colour line wall:flowstone [85 45 10]
 symbol-colour area snow [0 70 90]
 symbol-colour point water [10 25 55]
 symbol-colour line border [10 25 55]
 symbol-colour area water [10 25 55]
 #symbol-colour line contour [0 70 90]
 symbol-colour point stalactite [85 45 10]
 symbol-colour point stalagmite [85 45 10]
 symbol-colour area clay [55 25 10]
 symbol-colour point clay [55 25 10]
 symbol-colour point water-flow [10 25 55]
 symbol-assign point anchor MY 
endlayout