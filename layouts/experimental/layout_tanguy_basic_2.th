encoding  utf-8
#_____________________________________________________________
#                                                             |
#             THIS IS A THERION LAYOUT DEFINITION FILE        |
#                                                             |
#             it contains the redefinition for a layout       |
#             with a Tanguy approved style                    |
#                                                             |
#             the format is good, trust me                    |
#_____________________________________________________________|

# first we open the layout

layout map2

#_____________________________________________________________
#                                                             |
#                        GENERAL STATEMENTS                   |
#_____________________________________________________________|

  language en
  #debug all
  scale 1 500
  legend on
  map-header -1 100 off
  statistics topo-length off
  grid bottom
  grid-size 10 10 20 m
  grid-coords border
  #map-image 95 105 se ../victoria_cave/outputs/victoria_main_plan.pdf
  fonts-setup 6 10 14 21 28

code tex-map
    \def\maplayout{
  \legendbox{5}{5}{SW}{\scalebar}
  }
  endcode

code metapost 
#_____________________________________________________________
#                                                             |
#                            LEGEND ITEMS                     |
#_____________________________________________________________|

   

  ## SCALE BAR (modified from contributions by Thomas Holder)
  
  def s_scalebar (expr l, units, txt) =
    begingroup
     interim warningcheck:=0;
     tmp20:=20 * (l / Scale * cm * units / 100);
     tmp40:=40 * (l / Scale * cm * units / 100);
     tmp60:=60 * (l / Scale * cm * units / 100);
     tmp80:=80 * (l / Scale * cm * units / 100);
     tmp100:=100 * (l / Scale * cm * units / 100);
     scal10:=10 * l / 100;
     scal20:=20 * l / 100;
     scal40:=40 * l / 100;
     scal60:=60 * l / 100;
     scal80:=80 * l / 100;
     brht:= 5bp;
     lblht:= 8bp;
    endgroup;

    pickup PenD;

    draw (0,0)--(0,brht)--(tmp100,brht)--(tmp100,0)--(0,0);
    draw (tmp20,0)--(tmp20,brht);
    draw (tmp40,0)--(tmp40,brht);
    draw (tmp60,0)--(tmp60,brht);
    draw (tmp80,0)--(tmp80,brht);
    fill (tmp20,0)--(tmp40,0)--(tmp40,brht)--(tmp20,brht)--cycle;
    fill (tmp60,0)--(tmp80,0)--(tmp80,brht)--(tmp60,brht)--cycle;


    begingroup
     label.top(thTEX(decimal (l) & "\thinspace" & txt),origin+(tmp100,lblht));
     label.top(thTEX(decimal (scal80)),origin+(tmp80,lblht));
     label.top(thTEX(decimal (scal60)),origin+(tmp60,lblht));
     label.top(thTEX(decimal (scal40)),origin+(tmp40,lblht));
     label.top(thTEX(decimal (scal20)),origin+(tmp20,lblht));
     label.top(thTEX(decimal (0)),origin+(0,lblht));
     label.bot(thTEX("ELEVATION 1 : " & decimal round(Scale*100)),(tmp40+scal10,-2lblht));
    endgroup
   enddef; 
       
#_____________________________________________________________
#                                                             |
#                            POINT TYPES                      |
#_____________________________________________________________|
    
    def p_airdraught_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenD;
      thfill (-.12u,.08u)--(0,.12u)--(.12u,.08u)--(0,.3u)--cycle;
      thdraw (-.1u,-.35u)--(0,-.28u)--(.1u,-0.35u);
      thdraw (-.1u,-.25u)--(0,-.18u)--(.1u,-.25u);
      thdraw (0,-.28u)--(0,0.15u);
    enddef;
    
    def p_gradient_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenD;
      thfill (-.12u,.08u)--(0,.12u)--(.12u,.08u)--(0,.3u)--cycle;
      thdraw (0,-.28u)--(0,0.15u);
    enddef;
 
    def p_pillar_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thdraw (-.2u,-.2u)..(-.2u,.2u)..(.2u,.2u)..(.2u,-.2u)..cycle withcolor(1,0.5,0.1);
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_stalagmite_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;

    def p_stalactite_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenC;
      thdraw (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.5,0.1);
    enddef;
    
    # NOW SOME USER DEFINED POINTS
    
    def p_u_sampled_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      thdraw (-.2u,-.2u)..(-.2u,.2u)..(.2u,.2u)..(.2u,-.2u)..cycle withcolor(1,0.1,0.6);
      thfill (-.1u,-.1u)..(-.1u,.1u)..(.1u,.1u)..(.1u,-.1u)..cycle withcolor(1,0.1,0.6);
    enddef;

    def p_u_logger_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      thdraw (-.3u,-.3u)--(-.3u,.3u)--(.3u,.3u)..(.3u,-.3u)--cycle;
      thfill (-.2u,-.2u)--(-.2u,.2u)--(.2u,.2u)..(.2u,-.2u)--cycle;
    enddef;
    
    def p_u_waterdrip_MY (expr P,R,S,A)=
      U:=(.2u,.2u);
      T:=identity aligned A rotated R scaled S shifted P;
      pickup PenD;
      
      thdraw (0u,0u)--(0,.15u) withcolor(0,0.1,0.7);
      thdraw (0,.3u)--(0,.45u) withcolor(0,0.1,0.7);
      thdraw (0,-.15u)--(0,-.3u) withcolor(0,0.1,0.7);
      thfill (-.18u,-.15u)--(0,-.45u)--(.18u,-.15u)--(0,-.22u)--cycle withcolor(0,0.1,0.7);
    enddef;


#_____________________________________________________________
#                                                             |
#                            LINE TYPES                       |
#_____________________________________________________________|
    
    
    
    ##### SPECIFIC WALL TYPES
    # BLOCKS
     
     def l_wall_blocks_MY (expr P)=
      T:=identity;
      cas := 0;
      dlzka := arclength P;
    if dlzka > 0:
      mojkrok:=adjust_step(dlzka, 0.5u);
      pickup PenC;
      forever:
        t1 := arctime (cas + mojkrok*1/10) of P;
        t2 := arctime (cas + mojkrok*9/10) of P;
        
        q := ((point t1 of P) + .2u * unitvector(thdir(P,t1) rotated -125)) -- 
             (subpath (t1,t2) of P) --
             ((point t2 of P) + .2u * unitvector(thdir(P,t2) rotated -75));
        
        thdraw q randomized (u/12) withcolor(0.3,0.3,0.3);
        cas := cas + mojkrok;
        exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
    fi;
    enddef;  
    
    # FLOWSTONE
    
    def l_wall_flowstone_MY (expr P) = 
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      mojkrok:=adjust_step(dlzka, .75u);
      pickup PenC;
      p := (-.25u,-.05u)--(-.175u,.05u)--(-.1u,-.05u);
      q := (-.025u,-.05u)--(.05u,.05u)--(0.125u,-.05u);
      forever:
        t := arctime (cas + mojkrok/2) of P;
        thdraw p shifted (point t of P + .25u * unitvector(thdir(P,t) rotated -90)) withcolor(0.85,0.45,0.1);
        thdraw q shifted (point t of P + .25u * unitvector(thdir(P,t) rotated -90)) withcolor(0.85,0.45,0.1);
        cas := cas + mojkrok;
        exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
      endfor;
      pickup PenA;  
      thdraw P withcolor(1,0.5,0.1);
    enddef;
    
    # ICE
    def l_wall_ice_MY (expr P) = 
      T:=identity;
      thdraw P withcolor(0,0.7,0.9);
    enddef;
    
    
    #### TYPES INSIDE A PASSAGE
    
    # EXPOSURE OF BEDROCK
    
    def l_u_texture_MY (expr P)=
      T:=identity;
      thdraw P withpen PenD withcolor (0.3,0.3,0.3);
    enddef;
    
    # CENTRELINE
    
    def l_survey_cave_MY (expr P) =
      T:=identity;
      draw P withpen PenD withcolor (0.7,0,0);
    enddef;
    
    # ROCKBORDERS

    def l_rockborder_MY (expr P) = 
      T:=identity;
      pickup PenC;
      if cycle P: thclean P fi;
      thdraw P withcolor (0.3,0.3,0.3);
    enddef;
    
    # FLOWSTONE
    def l_u_wall_flowstone_MY (expr P)=
      T:=identity;
      cas := 0;
      dlzka := arclength P;
      if dlzka > 0:
        mojkrok:=adjust_step(dlzka, 0.25u);
        pickup PenC;
        forever:
          t1 := arctime (cas + mojkrok*2.5/10) of P;
          t1b := arctime (cas + mojkrok*4/10) of P;
          t2 := arctime (cas + mojkrok*7.5/10) of P;
          t2b := arctime (cas + mojkrok*6/10) of P;
          t2a :=arctime (cas +mojkrok*7.49/10) of P;
          
          q := ((point t1 of P) + .1u * unitvector(thdir(P,t1) rotated -115)) .. 
                ((point t1b of P) - .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t2b of P) - .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t2 of P) + .1u * unitvector(thdir(P,t2) rotated -65))--
               ((point t2a of P) + .1u * unitvector(thdir(P,t2a) rotated -65)) ..
               ((point t2b of P) + .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t1b of P) + .02u * unitvector(thdir(P,t1b) rotated -90)) ..
               ((point t1 of P) + .1u * unitvector(thdir(P,t1) rotated -115));
          
          thdraw q withcolor(0.85,0.45,0.1);
          cas := cas + mojkrok;
          exitif cas > dlzka - (2*mojkrok/3); % for rounding errors
        endfor;
      fi;
    enddef;
    
#_____________________________________________________________
#                                                             |
#                            AREA TYPES                       |
#_____________________________________________________________|

     # WATER
      def a_water_MY (expr p) =
       T:=identity;
       thfill p withcolor (0.1,0.1,0.25);
     enddef;
    
     # ICE
      beginpattern(pattern_ice_MY);
        pickup PenC;
        p:=(-.15u,0)--(.15u,0);
        draw p shifted(0.15,0.25u);
        draw p rotated -90 shifted (.3u,0.2u);
        patternxstep(0.6u);
        patternystep(0.6u);
        patterncolor(0,0.7,0.9);
     endpattern;
     
     def a_ice_MY (expr Path) =
      T:=identity;
      thclean Path;
      thfill Path withpattern pattern_ice_MY;
    enddef;
    
    # SNOW
    def a_snow_MY (expr P) =
      T:=identity;
      pickup PenC;
      path q; q = bbox P;
      picture tmp_pic, tmp_sn; 
      pair z;
      tmp_sn := image(
        pickup PenC;
        p := origin--(0,.2*u);
        draw p; draw p rotated (60); draw p rotated (120);
        draw p rotated (180); draw p rotated (240); draw p rotated (300);
        
      );
      tmp_pic := image(
        for i = xpart llcorner q step 1u until xpart urcorner q:
          for j = ypart llcorner q step 1u until ypart urcorner q:
            z:=((i,j) randomized 1.u);
      if xpart (P intersectiontimes ((bbox tmp_sn) shifted z)) < 0:
              draw tmp_sn shifted z;
      fi;
          endfor;  
        endfor;
      );
      clip tmp_pic to P;
      drawoptions();
      draw tmp_pic;
    enddef;
    
    # SEDIMENTARY FILLS
    
    # CLAY
    
      beginpattern(pattern_clay_MY);
        pickup PenD;
        p:= (-.008u,0)--(.008u,0);
        draw p;
        draw p rotated 25 shifted(.1u,0.1u);
        #draw p rotated 45 shifted(.02u,0.005u);
        #draw p rotated 75 shifted(.005u,0.015u);
        #draw p shifted(.03u,0.025u);
        #draw p shifted(.035u,0.01u);
        patternxstep(0.2u);
        patternystep(0.2u);
        patterncolor(0.65,0.55,0.1);
     endpattern;
     
     def a_clay_MY (expr Path) =
      T:=identity;
      thclean Path;
      thfill Path withpattern pattern_clay_MY;
    enddef;

    beginpattern(pattern_snow_MY);
        pickup PenC;
        p:=(-.15u,0)--(.15u,0);
        draw p;
        draw p rotated -60;
        draw p rotated 60;
        patternxstep(0.8u);
        patternystep(0.8u);
        patterncolor(0,0.7,0.9);
    endpattern;
    
    ## now deprecated?
    def a_thing_MY (expr p) =
      T:=identity;
      thclean p;
      pickup PenD;
      path q; q = bbox p;
      picture tmp_pic, tmp_ice;
      pair z;
      tmp_ice := image (
        draw (-.005u,0)--(.005u,0);
      );
      tmp_pic := image(
        for i = xpart llcorner q step .1u until xpart urcorner q:
          for j = ypart llcorner q step .1u until ypart urcorner q:
            z := ((i,j) randomized 0.02u);
            if xpart (p intersectiontimes ((bbox tmp_ice) shifted z)) < 0:
              draw tmp_ice shifted z;
            fi;
          endfor;
        endfor;
        );
      clip tmp_pic to p;
      drawoptions();
      draw tmp_pic;
    enddef;
    
    # SAND
    def a_sand_MY (expr p) =
      T:=identity;
      thclean p;
      pickup PenB;
      path q; q = bbox p;
      picture tmp_pic, tmp_ice;
      pair z;
      tmp_ice := image (
        draw (-.005u,0)--(.007u,0);
      );
      tmp_pic := image(
        for i = xpart llcorner q step .35u until xpart urcorner q:
          for j = ypart llcorner q step .35u until ypart urcorner q:
            z := ((i,j) randomized 0.2u);
            if xpart (p intersectiontimes ((bbox tmp_ice) shifted z)) < 0:
              draw tmp_ice shifted z;
            fi;
          endfor;
        endfor;
        );
      clip tmp_pic to p;
      drawoptions();
      draw tmp_pic;
    enddef;
    
    # PEBBLES
    def a_pebbles_MY (expr p) =
      T:=identity;
      thclean p;
      pickup PenD;
      path q; q = bbox p;
      picture tmp_pic;
      picture tmp_pebblea;
      picture tmp_pebbleb;
      pair z;
      pair za;
      tmp_pebblea := image (
        draw (((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle) scaled 0.035u) withcolor(0.5,0.5,0.5);
        fill (((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle) scaled 0.035u) withcolor(0.95,0.95,0.95);
      );
      tmp_pebbleb := image (
        draw (((((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle)rotated 35)  scaled 0.025u) shifted (0.2u,0.2u)) withcolor(0.5,0.5,0.5);
        fill (((((-.12u,0)..(.05u,0)..(.007u,0.003u)..(-0.004u,0.005u)--cycle)rotated 35) scaled 0.025u) shifted (0.2u,0.2u)) withcolor(0.95,0.95,0.95);
      );
      tmp_pic := image(
        for i = xpart llcorner q step .4u until xpart urcorner q:
          for j = ypart llcorner q step .4u until ypart urcorner q:
            z := ((i,j) randomized 0.3u);
            za :=((i,j) randomized 0.4u) ;
            if xpart (p intersectiontimes ((bbox tmp_pebblea) shifted z)) < 0:
              draw tmp_pebblea shifted z;
              draw tmp_pebbleb shifted z;
             
            fi;
          endfor;
        endfor;
        );
      clip tmp_pic to p;
      drawoptions();
      draw tmp_pic;
    enddef;

#_____________________________________________________________
#                                                             |
#               NOW WE INITIATE ALL THE SYMBOLS               |
#_____________________________________________________________|
   
   ## points
    # redefinitions 
    initsymbol("p_pillar_MY");
    initsymbol("p_stalagmite_MY");
    initsymbol("p_stalactite_MY");
    initsymbol("p_airdraught_MY");
    initsymbol("p_gradient_MY");
    
    initsymbol("p_u_logger_MY");
    initsymbol("p_u_waterdrip_MY");
    initsymbol("p_u_sampled_MY");
   
   ## lines
    # redefinitions
    # wall types
    initsymbol("l_wall_blocks_MY");
    initsymbol("l_wall_ice_MY");
    initsymbol("l_wall_flowstone_MY");
    
    # others
    initsymbol("l_rockborder_MY");
    initsymbol("l_survey_cave_MY");
    initsymbol("l_pit_MY");
    
    
    # user defined
    initsymbol("l_u_texture_MY");
    initsymbol("l_u_wall_flowstone_MY");
   
   ## areas
    # redefinitions
    initsymbol("a_snow_MY");
    initsymbol("a_ice_MY");
    initsymbol("a_water_MY");
    initsymbol("a_clay_MY");
    initsymbol("a_sand_MY");
    initsymbol("a_pebbles_MY");

endcode

#_____________________________________________________________
#                                                             |
#          WE ASSIGN THE SYMBOLS TYPES AND COLOURS            |
#_____________________________________________________________|

 ## survey lines and stations
 symbol-assign point station AUT
 symbol-assign line survey MY
 symbol-assign point station MY
 symbol-hide point passage-height
 symbol-colour point station-name [70 0 0]
 
 ## water and ice
 symbol-assign area ice MY
 symbol-assign area snow MY
 
 symbol-colour area ice [0 70 90]
 symbol-colour area snow [0 70 90]
 symbol-colour area water [0 10 70]
 symbol-colour point water-flow [0 10 70]
 symbol-colour point station-name [70 0 0]
 
 ## formations 
 symbol-colour point flowstone [85 45 10]
 symbol-color line wall:flowstone [85 45 10]
 symbol-colour point flowstone [85 45 10]
 symbol-colour point pillar [85 45 10]
 symbol-colour point stalagmite [85 45 10]
 symbol-colour point stalactite [85 45 10]
 symbol-colour point curtain [85 45 10]
 symbol-colour point helictite [85 45 10]
 symbol-colour point soda-straw [85 45 10]
 symbol-colour point crystal [85 45 10]
 
 ## sedimentary fills
 symbol-assign line rock-border MY
 symbol-assign area clay MY
 symbol-assign area sand MY
 symbol-assign area pebbles MY
 
 symbol-colour area clay [65 55 10]
 symbol-colour line wall:clay [65 55 10]
 symbol-colour area sand [85 75 10]
 symbol-colour line border [0 70 90]
 
 ## misc
 symbol-assign point gradient MY
 symbol-assign line pit AUT
 symbol-assign line wall MY
 symbol-assign point breakdown-choke AUT
 symbol-assign point air-draught MY

endlayout

#_____________________________________________________________
#                                                             |
#          FINALLY, WE DEFINE THE LEGEND LABELS               |
#_____________________________________________________________|

#english labels
text en "point u:logger_MY"  "logger"
text en "line u:flowstone_MY" "flowstone  wall"
text en "line u:openshaft_MY" "open shaft"
text en "line u:texture_MY" "bedrock exposed"
text en "point u:waterdrip_MY" "water drips"
text en "point u:sampled_MY" "sample taken"
text en "line u:wall_flowstone_MY" "wall flowstone"


#german labels
text de "line u:openshaft_MY" "Eingangskessel"
text de "line u:texture_MY" "Felsboden"
text de "line u:flowstone_MY" "flächiger Sinter"

